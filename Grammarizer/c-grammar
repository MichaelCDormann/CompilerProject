terminals = ["id", ";", "[", "]", "num", "int", "void", "float", "float_num", "(", ")", ",", "{", "}", "if", "else", "while", "return", "=", "<=", "<", ">", ">=", "==", "!=", "+", "-", "*", "/", "empty"]

program             ->  declaration-list
declaration-list    ->  declaration dec-list_prime
dec-list_prime      ->  declaration dec-list_prime | empty
declaration         ->  int dec_lf | void dec_lf | float dec_lf
dec_lf              ->  id dec_lf_lf
dec_lf_lf           ->  var-dec_lf  | ( params ) compound-stmt
var-dec_lf          ->  ; | [ num ] ;
params              ->  int id param_lf param-list_prime | void params_lf | float id param_lf param-list_prime
params_lf           ->  id param param_lf param-list_prime | empty
param-list_prime    ->  , param param-list_prime | empty
param               ->  int id param_lf | void id param_lf | float id param_lf
param_lf            ->  [ ] | empty
compound-stmt       ->  { local-declarations statement-list }
local-declarations  ->  int dec_lf local-declarations | void dec_lf local-declarations | float dec_lf local-declarations | empty
statement-list      ->  statement statement-list | empty
statement           ->  expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt     ->  expression ; | ;
selection-stmt      ->  if ( expression ) statement sel-stmt_lf
sel-stmt_lf         ->  else statement | empty
iteration-stmt      ->  while ( expression ) statement
return-stmt         ->  return ret-stmt_lf
ret-stmt_lf         ->  ; | expression ;
expression          ->  id expr_lf | ( expression ) term_prime add-expr_prime sim-exp_lf | num term_prime add-expr_prime sim-exp_lf | float_num term_prime add-expr_prime sim-exp_lf
#expr_lf             ->   var_lf = expression |  var_lf term_prime add-expr_prime sim-exp_lf | ( args ) term_prime add-expr_prime sim-exp_lf
expr_lf             ->  var_lf expr_lf_lf | ( args ) term_prime add-expr_prime sim-exp_lf
expr_lf_lf          ->  = expression | term_prime add-expr_prime sim-exp_lf
var_lf              ->  [ expression ] | empty
sim-exp_lf          ->  relop term add-expr_prime | empty
relop               ->  <= | < | > | >= | == | !=
add-expr_prime      ->  addop term add-expr_prime | empty
addop               ->  + | -
term                ->  factor term_prime
term_prime          ->  mulop factor term_prime | empty
mulop               ->  * | /
factor              ->  ( expression ) | id factor_lf | num | float_num
factor_lf           ->  var_lf | ( args )
args                ->  arg-list | empty
arg-list            ->  expression arg-list_prime
arg-list_prime      ->  , expression arg-list_prime | empty